<?php
/**
 * @file
 * Code for the Blood Files feature.
 */

/**
 * Implements hook_menu().
 */
function filerestore_menu() {
  $items['admin/config/media/filerestore'] = array(
    'title' => 'File Restore',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('filerestore_admin_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'filerestore.admin.inc',
  );

  return $items;
}

/**
 * Scan for public files
 *
 * Some files may exist in Drupal's directories
 * but aren't managed by Drupal. This function
 * finds those files and reports on them.
 *
 * @return array
 *  Returns an array of unmanaged files.
 */
function filerestore_find_public_files($managed = FALSE) {
  module_load_include('inc', 'file_entity', 'file_entity.pages');
  $files = array();
  $unmanaged = array();

  // Only scan for files which can be uploaded to Drupal
  $extensions = variable_get('file_entity_default_allowed_extensions', array());
  $extensions = str_replace(' ', '|', $extensions);
  $extensions = drupal_strtolower($extensions);
  $extensions .= '|' . drupal_strtoupper($extensions);

  // Scan the public files directory
  $files = file_scan_directory('public://', '/^.*\.(' . $extensions . ')$/');

  // Remove files from the 'styles' directory
  foreach ($files as $file => $data) {
    if (FALSE !== strpos($data->uri, 'public://styles')) {
      unset($files[$file]);
    }
  }

  if ($files and !$managed) {
    // Trim files which exist in drupal's file db
    foreach ($files as $file => $data) {
      $fid = db_query('SELECT fid FROM {file_managed} WHERE uri = :uri', array(':uri' => $data->uri))->fetchField();
      if (empty($fid)) {

        // Set the mimetype
        $data->filemime = file_get_mimetype($data->uri);

        // Set the file entity type
        $candidates = filerestore__file_entity_get_filetype_candidates($data);
        $type = reset($candidates);
        $data->type = drupal_strtolower($type);

        foreach (filehash_algos() as $algo) {
          $data->filehash[$algo] = hash_file($algo, $data->uri);
        }

        $unmanaged[$file] = $data;
      }
    }
    $files = $unmanaged;
  }

  return $files;
}

/**
 * Import the list of files to the managed file system
 */
function filerestore_batch_manage_files($unmanaged = array()) {
  if (empty($unmanaged)) {
    $unmanaged = filerestore_find_public_files(FALSE);
  }

  $num_operations = count($unmanaged);
  $operations = array();

  foreach ($unmanaged as $file) {
    $operations[] = array(
      'filerestore_batch_manage_files_op',
      array(
        $file,
        t('Importing file @uri', array('@uri' => $file->uri)),
      ),
    );
  }

  $batch = array(
    'operations' => $operations,
    'finished' => 'filerestore_batch_manage_files_finished',
  );

  return $batch;
}

/**
 * Batch op for managing a file
 */
function filerestore_batch_manage_files_op($file, $op_details, &$context) {
  // If it matches, get the current path to the unmanaged file
  $found = filerestore__file_validate($file);
  $duplicate = !empty($found);

  // Optional message displayed under the progressbar.
  $context['message'] = t('Processing file @path', array('@path' => $file->uri));

  if ($duplicate) {
    // Skip
  }
  else {
    // Check if it exists in training table
    $results = db_select('filehash_train', 'ft')
      ->fields('ft', array('fid'))
      ->condition('md5', $file->filehash['md5'], '=')
      ->execute();

    if ($results->rowCount() > 0) {
      $fid_row = $results->fetchCol();
      $fid_val = reset($fid_row);


      $check_file = file_load($fid_val);
      if (!isset($check_file->fid)) {

        $metadata = db_select('file_managed_train', 'ft')
          ->fields('ft', array('fid','uid','filename','filemime','filesize','status','timestamp','uuid','type','created_timestamp','accessible_timestamp','accessible_uid','moderator_uid'))
          ->condition('ft.fid', $fid_val, '=')
          ->execute()
          ->fetchAllAssoc('fid');

        // Add the metadata.
        foreach ((array)$metadata as $key => $value) {
          $file->{$key} = $value;
        }

        filerestore__file_save($fid_val, $file);
        filehash_save($file);

        $context['results'][] = t('File @path restored with fid @fid', array('@path' => $file->uri, '@fid' => $file->fid));
        // Log the action
        watchdog('filerestore', 'Restored file @path', array('@path' => $file->uri));
      }
      else {
        watchdog('filerestore', 'Skipping @fid since it already exists. @path not restored.', array('@fid' => $fid_val, '@path' => $file->uri));
      }
    }
  }
}

/**
 * Batch finished callback
 */
function filerestore_batch_manage_files_finished($success, $results, $operations) {
  foreach ($results as $result) {
    drupal_set_message($result);
  }
  if ($success) {
    // Here we could do something meaningful with the results.
    // We just display the number of nodes we processed...
    $files = filerestore_find_public_files();
    drupal_set_message(t('Restored @count files.', array('@count' => count($results))));
    foreach ($files as $file) {
      drupal_set_message(t('@path not restored.', array('@path' => $file->uri)), 'warning');
    }
    drupal_set_message(t('@count unmanaged files remain.', array('@count' => count($files))), 'warning');
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(t('Some files failed to import. Please check the logs for details.', array(
      '@operation' => $error_operation[0],
      '@args' => print_r($error_operation[0], TRUE),
    )));
  }
}

/**
 * Custom copy of file_save to allow fid to be set.
 *
 * @see file_save().
 */
function filerestore__file_save($fid, stdClass $file) {
  // Ensure the passed fid value is the same.
  if (!isset($file->fid) or $fid !== $file->fid) {
    $file->fid = $fid;
  }
  $file->timestamp = REQUEST_TIME;
  $file->filesize = filesize($file->uri);

  // Since hte files were deleted without triggering hooks
  // we should insert them without hooks
  module_invoke_all('file_presave', $file);
  module_invoke_all('entity_presave', $file, 'file');

  db_insert('file_managed')
    ->fields(array(
      'fid' => $fid,
      'uid' => $file->uid,
      'filename' => $file->filename,
      'uri' => $file->uri,
      'filemime' => $file->filemime,
      'type' => $file->type,
      'timestamp' => $file->timestamp,
      'uuid' => $file->uuid,
      'created_timestamp' => $file->created_timestamp,
      'accessible_timestamp' => $file->accessible_timestamp,
      'accessible_uid' => $file->accessible_uid,
      'moderator_uid' => $file->moderator_uid,
    ))
    ->execute();

  watchdog('filerestore', 'Writing @fid and got back @fid_save', array('@fid' => $fid, '@file_save' => $file->fid), WATCHDOG_DEBUG);

  return $file;
}

/**
 * Validate duplicates
 */
function filerestore__file_validate($file) {
  $errors = array();
  foreach (filehash_algos() as $algo) {
    if (db_query("SELECT COUNT(*) FROM {filehash} WHERE $algo = :hash", array(':hash' => hash_file($algo, $file->uri)))->fetchField()) {
      $errors[] = t('Sorry, duplicate files are not permitted.');
      break;
    }
  }
  return $errors;
}

/**
 * Get the candidate filetypes for a given file.
 *
 * Only filetypes for which the user has access to create entities are returned.
 *
 * @param array $file
 *   An upload file array from form_state.
 *
 * @return array
 *   An array of file type bundles that support the file's mime type.
 */
function filerestore__file_entity_get_filetype_candidates($file) {
  $types = module_invoke_all('file_type', $file);
  drupal_alter('file_type', $types, $file);
  $candidates = array();
  foreach ($types as $type) {
    $file->type = $type;
    $candidates[$type] = file_entity_type_get_name($file);
  }
  return $candidates;
}